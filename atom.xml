<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会写代码的架构师不是好程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aosabook.cc/"/>
  <updated>2018-09-25T05:32:53.822Z</updated>
  <id>http://blog.aosabook.cc/</id>
  
  <author>
    <name>老曹同学</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tutorial: Read a React App</title>
    <link href="http://blog.aosabook.cc/2018/09/24/Tutorial-Read-a-React-App/"/>
    <id>http://blog.aosabook.cc/2018/09/24/Tutorial-Read-a-React-App/</id>
    <published>2018-09-24T15:20:47.000Z</published>
    <updated>2018-09-25T05:32:53.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tutorial：Read-a-React-App"><a href="#Tutorial：Read-a-React-App" class="headerlink" title="Tutorial：Read a React App"></a>Tutorial：Read a React App</h1><p>本教程的内容是讲解一个简单的React应用代码。通过对工程的分析来讲解构建一个简单的React应用所需要的各种技术。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在本教程中会假设你已经掌握了以下预备知识：</p><ul><li>HTML</li><li>JavaScript</li><li>DOM</li></ul><p><a href="https://github.com/Benjamin15122/dc-ui" target="_blank" rel="noopener">点击这里查看项目源码</a><br>本教程的参考资料和引用来源：</p><ul><li><a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc2" target="_blank" rel="noopener">阮一峰：JavaScript标准参考教程</a></li><li><a href="https://reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a></li><li><a href="https://segmentfault.com/a/1190000010522782" target="_blank" rel="noopener">React渲染机制解析</a></li><li><a href="https://react-guide.github.io/react-router-cn/docs/Introduction.html" target="_blank" rel="noopener">React Router中文文档</a></li><li><a href="https://reacttraining.com/react-router/core/api/MemoryRouter" target="_blank" rel="noopener">reacttraining.com/react-router/core/api</a></li><li><a href="https://zhuanlan.zhihu.com/p/26231889" target="_blank" rel="noopener">知乎专栏：JavaScript模块演化简史</a></li><li><a href="https://github.com/ruanyf/webpack-demos#demo01-entry-file-source" target="_blank" rel="noopener">阮一峰的webpack-demos</a></li><li></li></ul><hr><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>方法一：</p><ol><li>确保安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>最新版本</li><li>命令行进入项目根目录执行以下指令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ol><p>方法二：（由于不可描述的原因，推荐使用本方法）</p><ol><li>确保安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>最新版本</li><li>命令行进入项目根目录执行以下指令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure></li></ol><p><strong>从以上指令聊聊包管理</strong></p><ol><li>什么是<strong>Node.js</strong>?<br>简而言之，<strong>Node.js是一个JavaScript的运行环境</strong>，Node.js是一个后端的Javascript运行环境（支持的系统包括Linux、Windows），这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node helloworld.js</span><br></pre></td></tr></table></figure></li></ol><p>Node.js采用了Google Chrome浏览器的v8引擎，并提供了诸如文件操作，网络编程等API。它与浏览器端JavaScript代码运行的不同就在于浏览器端的Javascript代码在运行时会受到各种安全性的限制，对客户系统的操作有限。而Node.js则是全面的后台运行时，为Javascript提供了其他语言能够实现的许多功能。</p><ol start="2"><li>什么是<strong>NPM</strong>?<br>NPM（node package manager),通常称为node包管理器，主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。React项目在开发，运行时会对一些node包有依赖关系，我们需要通过npm install指令安装它们，例如通过在根目录下执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli</span><br></pre></td></tr></table></figure></li></ol><p>我们实现了在本地安装该React项目依赖的包之一：grunt-cli。执行install时，项目根目录下会创建node_modules目录，该项目依赖的包将会被安装到这个文件夹下。<br>为了避免逐个对所依赖的包进行install，同时确保项目依赖的包都能被正确安装，node支持通过package.json对依赖进行描述，如本项目目录下的package.json中有如下代码段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;my-app&quot;,</span><br><span class="line">&quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">&quot;private&quot;: true,</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">&quot;antd&quot;: &quot;^3.9.2&quot;,</span><br><span class="line">&quot;axios&quot;: &quot;^0.18.0&quot;,</span><br><span class="line">&quot;connected-react-router&quot;: &quot;^4.4.1&quot;,</span><br><span class="line">&quot;react&quot;: &quot;^16.5.0&quot;,</span><br><span class="line">&quot;react-dom&quot;: &quot;^16.5.0&quot;,</span><br><span class="line">&quot;react-redux&quot;: &quot;^5.0.7&quot;,</span><br><span class="line">&quot;react-router&quot;: &quot;^4.3.1&quot;,</span><br><span class="line">&quot;redux&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">&quot;redux-logger&quot;: &quot;^3.0.6&quot;,</span><br><span class="line">&quot;redux-saga&quot;: &quot;^0.16.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它描述了当前React项目的项目名称，项目版本号，私有属性和依赖包列表。package.json的主要属性说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name - 项目名称</span><br><span class="line"></span><br><span class="line">version - 项目版本号</span><br><span class="line"></span><br><span class="line">script - npm install过程中执行的指令</span><br><span class="line"></span><br><span class="line">author - 项目作者姓名</span><br><span class="line"></span><br><span class="line">contributors - 项目其他贡献者姓名</span><br><span class="line"></span><br><span class="line">dependencies - 项目运行所依赖的模块，本地未安装的模块会被安装到根目录下的node_modules目录</span><br><span class="line"></span><br><span class="line">devDependencies - 项目开发所依赖的模块，本地未安装的模块会被安装到根目录下的node_modules目录</span><br></pre></td></tr></table></figure></p><p>package.json的详细说明可见<a href="http://javascript.ruanyifeng.com/nodejs/packagejson.html#toc2" target="_blank" rel="noopener">这里</a>。<br>当我们执行npm install时，npm会依据项目根目录下的package.json的描述，进行依赖包的安装。</p><ol start="3"><li>什么是<strong>cnpm</strong>？<br>cnpm是方便国内使用的npm替代工具，它通过使用淘宝镜像确保依赖安装速度，并通过定时与npm同步更新的方式尽可能与npm保持一致。以下指令安装了cnpm并使用淘宝镜像：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li></ol><p>使用时只需把npm指令对应的npm替换为cnpm即可。以下指令即使用cnpm进行依赖安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure></p><hr><h2 id="关于TypeScript"><a href="#关于TypeScript" class="headerlink" title="关于TypeScript"></a>关于TypeScript</h2><p>本项目的React代码文件后缀为.ts，即我们使用的是TypeScript。由于TypeScript支持JavaScript语法，并且代码中并没有过多涉及TypeScript特有的语法（你可以直接复制粘贴代码到.js文件中运行），因此本教程不对TypeScript做过多解释。TypeScript的教程可以在<a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html" target="_blank" rel="noopener">这里</a>查看。</p><hr><h2 id="Render机制"><a href="#Render机制" class="headerlink" title="Render机制"></a>Render机制</h2><ol><li>ReactDOM<br>DOM（Document Object Model，文档对象模型）定义了访问HTML和XML文档的标准。HTML是用来描述网页的语言。DOM描述了HTML文档的访问顺序，一般组织为一个DOM树，描述了不同的HTML元素之间的关系，浏览器通过DOM树知道网页应当如何被渲染。<br>我们已经知道通过定义一个React元素可以在屏幕展示想要看到的东西，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const element = &lt;h1&gt;Hello, world&lt;/h1&gt;;</span><br></pre></td></tr></table></figure></li></ol><p>但不同于浏览器的DOM元素，React元素只是一个对象。React元素包含页面展示内容的描述信息，ReactDOM的职能是依据React元素对DOM树进行更新，使得DOM树内容与React元素定义的内容一致。<br>为了举例说明ReactDOM如何将React元素映射到DOM树，我们定义一个HTML标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>它是一个DOM元素，可以通过document.getElementById(‘root’)来获取。<br>假设需要将element元素插入这个标签，ReactDOM需要进行如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(element, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure></p><p>以本项目根目录下src/index.tsx的代码片段为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Provider store=&#123;configureStore()&#125;&gt;</span><br><span class="line">&lt;ConnectedRouter history=&#123;history&#125;&gt;</span><br><span class="line">&lt;Application/&gt;</span><br><span class="line">&lt;/ConnectedRouter&gt;</span><br><span class="line">&lt;/Provider&gt;,</span><br><span class="line">document.getElementById(&quot;root&quot;) as HTMLElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>它创建了一个<code>&lt;Provider /&gt;</code>元素，并将其插入了在public/index.html中创建的root节点，从而在渲染root节点时，会渲染<code>&lt;Provider /&gt;</code>及其子节点。<br><strong>React中，创建元素并传入ReactDOM.reader()是唯一更新UI的方法</strong>。</p><ol start="2"><li>Render<br>render()方法是一个组件类唯一必要的方法。render()方法会在渲染当前组件时被调用。当render()组件被调用时，它会检测this.props和this.state，并返回以下结果中的一种：</li></ol><p>React元素：一般由JSX创建。例如<code>&lt;div /&gt;</code>和<code>&lt;MyApp /&gt;</code>，ReactDOM会将它们分别渲染为DOM节点和用户自定义组件。<br>数组和fragments：你可以用render()方法通过这种方式返回多个组件。fragments在本项目中并未涉及，详见它的<a href="https://reactjs.org/docs/fragments.html" target="_blank" rel="noopener">说明文档</a>。<br>Portals：你可以通过这种方式将当前组件渲染到其他DOM子树中，本项目中并未涉及，详见它的<a href="https://reactjs.org/docs/portals.html" target="_blank" rel="noopener">说明文档</a>。<br>字符串和数字：它们会被渲染为DOM的文本节点。<br>布尔类型和null：它们不会被渲染。多数情况下它们是为了支持<code>return test &amp;&amp; &lt;Child /&gt;</code>，其中<code>test</code>是布尔类型。</p><p>render()方法必须是纯函数，它不改变组件的状态，它们每次被调用时都返回同样的结果，并且render()不与浏览器进行直接交互。</p><ol start="3"><li>React渲染过程<br>React有效提高了网页性能，它通过自身的render机制实现了这一点。React渲染页面的过程大致可以描述为：在页面打开时，调用render函数构建一颗DOM树，在state/props发生改变时，render函数会被再次调用渲染出另外一棵树。接着，React会用两棵树进行对比，找到需要更新的地方批量改动。<br>实际的比较过程和算法有一定复杂性，如果你对这一过程感兴趣，我们推荐阅读<a href="https://segmentfault.com/a/1190000010522782" target="_blank" rel="noopener">这篇文章</a>。</li></ol><hr><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>当浏览网页时，每个页面会有一个URL，当URL变化时，网页内容也会切换。当我们创建一个较为复杂的应用，它通常都会包含诸多页面。假设当前有一个具有两个页面的应用App，两个页面分别是About和Inbox。如果我们要指定两个URL<code>/about</code>，<code>/inbox</code>，使得点击后分别跳转到About和inbox页面，React通常这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class="line"></span><br><span class="line">const About = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line">const Inbox = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line">const Home = React.createClass(&#123;/*...*/&#125;)</span><br><span class="line"></span><br><span class="line">const App = React.createClass(&#123;</span><br><span class="line">getInitialState() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">route: window.location.hash.substr(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">window.addEventListener(&apos;hashchange&apos;, () =&gt; &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">route: window.location.hash.substr(1)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">let Child</span><br><span class="line">switch (this.state.route) &#123;</span><br><span class="line">case &apos;/about&apos;: Child = About; break;</span><br><span class="line">case &apos;/inbox&apos;: Child = Inbox; break;</span><br><span class="line">default:      Child = Home;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;App&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#/inbox&quot;&gt;Inbox&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">React.render(&lt;App /&gt;, document.body)</span><br></pre></td></tr></table></figure></p><p>这样的做法在页面数量较少，组件较为简单时是可行的。但当页面数量增加，组件之间的组合关系变复杂时，我们就需要编写大量的代码来指定URL渲染对应的组件。例如，假设Inbox页面上包含了众多指向其他页面的链接，效果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">path: /inbox/messages/1234</span><br><span class="line"></span><br><span class="line">+---------+------------+------------------------+</span><br><span class="line">| About   |    Inbox   |                        |</span><br><span class="line">+---------+            +------------------------+</span><br><span class="line">| Compose    Reply    Reply All    Archive      |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">|Movie tomorrow|                                |</span><br><span class="line">+--------------+   Subject: TPS Report          |</span><br><span class="line">|TPS Report        From:    boss@big.co         |</span><br><span class="line">+--------------+                                |</span><br><span class="line">|New Pull Reque|   So ...                       |</span><br><span class="line">+--------------+                                |</span><br><span class="line">|...           |                                |</span><br><span class="line">+--------------+--------------------------------+</span><br></pre></td></tr></table></figure></p><p>那么，在switch语句中Inbox的部分将会变得极为庞大，同时state中route的更新也会变得更加复杂。为了更智能地管理URL和对应的页面，我们需要一个路由库。<br>React Router是React唯一可用的路由库，它通过管理URL来实现组件的切换和状态的变化。对于之前的举例，使用React Router重构后，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class="line"></span><br><span class="line">// 首先我们需要导入一些组件...</span><br><span class="line">import &#123; Router, Route, Link &#125; from &apos;react-router&apos;</span><br><span class="line"></span><br><span class="line">// 然后我们从应用中删除一堆代码和</span><br><span class="line">// 增加一些 &lt;Link&gt; 元素...</span><br><span class="line">const App = React.createClass(&#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;App&lt;/h1&gt;</span><br><span class="line">&#123;/* 把 &lt;a&gt; 变成 &lt;Link&gt; */&#125;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/inbox&quot;&gt;Inbox&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&#123;/*</span><br><span class="line">接着用 `this.props.children` 替换 `&lt;Child&gt;`</span><br><span class="line">router 会帮我们找到这个 children</span><br><span class="line">*/&#125;</span><br><span class="line">&#123;this.props.children&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 最后，我们用一些 &lt;Route&gt; 来渲染 &lt;Router&gt;。</span><br><span class="line">// 这些就是路由提供的我们想要的东西。</span><br><span class="line">React.render((</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">&lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class="line">&lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125; /&gt;</span><br><span class="line">&lt;/Route&gt;</span><br><span class="line">&lt;/Router&gt;</span><br><span class="line">), document.body)</span><br></pre></td></tr></table></figure></p><p>显而易见，首先React Router避免了通过window.location.hash的接口来获取URL，避免了多层嵌套带来的处理难题，其次JSX格式的描述具有良好的扩展性，同时能直观展示组件之间的嵌套关系。<br><code>&lt;Route /&gt;</code>提供了一个path作为匹配模式，并提供了一个component作为满足匹配模式时需要渲染的网页。<br><code>&lt;Router /&gt;</code>是一个基础的路由器接口，它用于管理路由的切换和选择，所有上层的路由器都会继承它。<br>React Router有丰富的组件和工具，并支持自定义路由组件，如本项目中的路由(app.tsx)如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Route exact path=&quot;/login&quot; component=&#123;LoginPage&#125;&gt;&lt;/Route&gt;</span><br><span class="line">&lt;AuthorizedRoute path=&quot;/&quot; component=&#123;HomePage&#125;&gt;&lt;/AuthorizedRoute&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure></p><p>其中<code>&lt;Switch /&gt;</code>是一个React Router库的组件，它类似于C++或是Java中的Switch语块。它在对路由进行匹配时，会顺次匹配自己的子元素<code>&lt;Route /&gt;</code>，并对第一次匹配到的<code>&lt;Route /&gt;</code>中的component进行渲染。<br>而<code>&lt;AuthorizedRoute /&gt;</code>则是一个自定义组件，它继承了<code>&lt;Route /&gt;</code>。<br>React Router的各类工具有很多，篇幅所限不一一列举。<br>关于React Router的API说明可见<a href="https://reacttraining.com/react-router/core/api/MemoryRouter" target="_blank" rel="noopener">这里</a>。</p><hr><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块化主要是解决代码分割、作用域隔离、模块之间的依赖管理以及发布到生产环境时的自动化打包与处理等多个方面的问题。通俗地讲就是将代码划分为多个独立的片段，一个模块只有通过特定的模块化方案才能调用另一个模块的内容。随着代码库增长，不使用模块化方案将很容易导致命名冲突等问题。</p><p>熟悉Java和C++或其他支持模块化语言的用户应当对本项目中的import和export有基本的理解。本项目使用的模块化方案为ES6（ECMAScript2015）方案，它主要的import和export语法示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//export 语法</span><br><span class="line">export default 42;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">export default [];</span><br><span class="line">export default foo;</span><br><span class="line">export default function () &#123;&#125;</span><br><span class="line">export default class &#123;&#125;</span><br><span class="line">export default function foo () &#123;&#125;</span><br><span class="line">export default class foo &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//import 语法</span><br><span class="line">// default imports</span><br><span class="line">import foo from &quot;foo&quot;;</span><br><span class="line">import &#123;default as foo&#125; from &quot;foo&quot;;</span><br><span class="line"></span><br><span class="line">// named imports</span><br><span class="line">import &#123;bar&#125; from &quot;foo&quot;;</span><br><span class="line">import &#123;bar, baz&#125; from &quot;foo&quot;;</span><br><span class="line">import &#123;bar as baz&#125; from &quot;foo&quot;;</span><br><span class="line">import &#123;bar as baz, xyz&#125; from &quot;foo&quot;;</span><br><span class="line"></span><br><span class="line">// glob imports</span><br><span class="line">import * as foo from &quot;foo&quot;;</span><br><span class="line"></span><br><span class="line">// mixing imports</span><br><span class="line">import foo, &#123;baz as xyz&#125; from &quot;foo&quot;;</span><br><span class="line">import * as bar, &#123;baz as xyz&#125; from &quot;foo&quot;;</span><br><span class="line">import foo, * as bar, &#123;baz as xyz&#125; from &quot;foo&quot;;</span><br></pre></td></tr></table></figure></p><p>同时也含有被广泛支持的CommonJS方案，语法如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//exports</span><br><span class="line">module.exports = foo;</span><br><span class="line"></span><br><span class="line">//imports</span><br><span class="line">const a = require(&quot;../b.js&quot;);</span><br></pre></td></tr></table></figure></p><p>想要对JavaScript模块化的发展和各种方案有所了解的读者可以阅读<a href="https://zhuanlan.zhihu.com/p/26231889" target="_blank" rel="noopener">这篇专栏</a>。</p><hr><h2 id="Redux简介"><a href="#Redux简介" class="headerlink" title="Redux简介"></a>Redux简介</h2><hr><h2 id="webpack的使用"><a href="#webpack的使用" class="headerlink" title="webpack的使用"></a>webpack的使用</h2><p>webpack是一个前端构建工具，本项目使用webpack进行构建。webpack需要一个配置文件<code>webpack.config.js</code>。通过在这个文件中对构建和打包方式进行配置，并在<code>package.json</code>的<code>script</code>字段进行命令配置，就可以实现通过webpack进行项目构建。<br>webpack详细教程可见<a href="https://github.com/ruanyf/webpack-demos#demo01-entry-file-source" target="_blank" rel="noopener">这篇教程</a>。<br>本项目根目录下的webpack目录内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webpack</span><br><span class="line">-webpack.config.js//webpack配置文件</span><br><span class="line">-webpack.dev.js//NODE_ENV开发环境配置文件</span><br><span class="line">-webpack.prod.js//NODE_ENV生产环境配置文件</span><br></pre></td></tr></table></figure></p><p>其中，webpack.dev.js和webpack.prod.js也是webpack配置的一部分。NODE_ENV是Node的系统环境变量，它们在package.json中被这样调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;NODE_ENV=development webpack-dev-server --config ./webpack/webpack.dev.js --progress --colors --content-base ./dist --host 127.0.0.1 --port 4000&quot;,</span><br><span class="line">&quot;start-dev&quot;: &quot;npm run start&quot;,</span><br><span class="line">&quot;start-prod&quot;: &quot;NODE_ENV=production webpack-dev-server --config ./webpack/webpack.prod.js --progress --colors --content-base ./dist --host 127.0.0.1 --port 4000&quot;,</span><br><span class="line">&quot;build-dev&quot;: &quot;webpack --progress --config=webpack.dev.js&quot;,</span><br><span class="line">&quot;build-prod&quot;: &quot;webpack --progress --config=webpack.prod.js&quot;,</span><br></pre></td></tr></table></figure></p><p>即对于开发和生产环境进行不同的配置。</p><hr><h2 id="什么是AntDesign"><a href="#什么是AntDesign" class="headerlink" title="什么是AntDesign"></a>什么是AntDesign</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tutorial：Read-a-React-App&quot;&gt;&lt;a href=&quot;#Tutorial：Read-a-React-App&quot; class=&quot;headerlink&quot; title=&quot;Tutorial：Read a React App&quot;&gt;&lt;/a&gt;Tutorial：Re
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React简易教程</title>
    <link href="http://blog.aosabook.cc/2018/09/19/Tutorial-Intro-to-React/"/>
    <id>http://blog.aosabook.cc/2018/09/19/Tutorial-Intro-to-React/</id>
    <published>2018-09-19T07:51:50.000Z</published>
    <updated>2018-09-19T09:02:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本教程的内容是实现一个小游戏。实现这个小游戏过程中需要学习的技术是实现任何React应用的基础，通过实现这个小游戏，你会对React有更好的理解。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程分为以下几个部分：</p><ul><li>搭建环境：配置实现小游戏的环境</li><li>React简介：讲解React的核心元素：conmponents，props，state</li><li>游戏编写：讲解React开发中最常见的一些技术</li></ul><p>在你阅读教程时，你可以复制粘贴教程中的代码来一步步实现游戏。但我们更推荐你把代码手工敲一遍，这样更有助于加强肌肉记忆和对React开发的理解。</p><h3 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h3><p>本教程将会使用React开发一个有交互的井字棋游戏。</p><p>你可以从<a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010" target="_blank" rel="noopener">这里</a>看到游戏的最终实现。如果这个代码你完全看不懂，或是不明白代码中的语法，那么本教程可以帮助你理解React和它的语法。</p><p>我们希望你在继续阅读本教程之前先仔细观察游戏的最终实现，你会发现棋盘右侧有一个带序号的列表，它随着游戏进行而更新，记录了棋盘每一步的变化。</p><p>如果你已经对井字棋游戏非常熟悉了，那么你可以关闭游戏并继续阅读本教程。我们将从一个简单的React应用开始做起。下一步我们将先搭建React的开发环境，使你可以开始编写React应用。</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>我们会假设你已经熟悉HTML和JavaScript，但实际上即使你只掌握了不同于前两者的编程语言，也足以跟进本教程。我们还假设你已经对于函数（functions），对象（objects），数组（arrays），你至少需要理解类（classes）的概念。</p><p>如果你需要复习一下JavaScript，我们推荐你在继续阅读本教程之前先行阅读<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">这篇教程</a>。注意，我们使用了JavaScript最近版本（ES6）的特性。在这篇教程中，我们将使用函数指针（arrow functions），类（classes），let和const声明。你可以通过<a href="https://babeljs.io/repl/#?presets=react&amp;code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA" target="_blank" rel="noopener">Babel REPL</a>来检查ES6代码会编译成什么。</p><hr><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>有两种方式实现本教程，你可以选择在浏览器上编写代码或是使用本地开发环境编写代码。</p><h3 id="选项1：在浏览器编写代码"><a href="#选项1：在浏览器编写代码" class="headerlink" title="选项1：在浏览器编写代码"></a>选项1：在浏览器编写代码</h3><p>这个环境搭建最为简单。<br>第一步，在新标签页打开<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" target="_blank" rel="noopener">这个链接</a>。页面会展示一个空的井字棋棋盘和它对应的React代码。我们将对这部分代码进行编辑。</p><p>你现在可以跳过另一个环境搭建教程，并进入<a href="#react">React简介</a>。</p><h3 id="选项2：本地开发环境搭建"><a href="#选项2：本地开发环境搭建" class="headerlink" title="选项2：本地开发环境搭建"></a>选项2：本地开发环境搭建</h3><p>这个部分是可选的，本教程无须搭建本地环境，在浏览器编写也可以完成。</p><h4 id="在命令行输入以下指令后你可以用指定的代码编辑器搭建本地开发环境"><a href="#在命令行输入以下指令后你可以用指定的代码编辑器搭建本地开发环境" class="headerlink" title="在命令行输入以下指令后你可以用指定的代码编辑器搭建本地开发环境"></a>在命令行输入以下指令后你可以用指定的代码编辑器搭建本地开发环境</h4><p>以下搭建工作量比选项一大，但完成后你可以自行选择编辑器来完成教程代码编写。以下是操作步骤：</p><ol><li>确保你已经安装了<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>的最新版本</li><li>依照<a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app" target="_blank" rel="noopener">创建React应用教程</a>新建一个React项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app my-app</span><br></pre></td></tr></table></figure><ol><li>删除已新建项目中src/下的所有文件（注意不要删除目录）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">rm -f src/*</span><br></pre></td></tr></table></figure><ol><li>在src/下添加index.css，并输入<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0100" target="_blank" rel="noopener">这些CSS代码</a></li><li>在src/下添加index.js，并输入<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" target="_blank" rel="noopener">这些JS代码</a></li><li>在src/index.js的开头添加如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br></pre></td></tr></table></figure><p>现在项目根目录下运行<code>npm start</code>，并用浏览器打开<code>http://localhost:3000</code>，应该可以看见一个空的井字棋棋盘。</p><p>我们推荐你的编辑器使用<a href="http://babeljs.io/docs/en/editors/" target="_blank" rel="noopener">这个高亮方案</a>。</p><h4 id="搭建环境问题"><a href="#搭建环境问题" class="headerlink" title="搭建环境问题"></a>搭建环境问题</h4><p>在配置环境时出错，可以访问<a href="https://reactjs.org/community/support.html" target="_blank" rel="noopener">这些资源</a>。特别是<a href="https://discordapp.com/invite/0ZcbPKXt5bZjGY5n" target="_blank" rel="noopener">Reactiflux社区</a>是一个解决问题的有效途径。</p><hr><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><h4 id="React是什么"><a href="#React是什么" class="headerlink" title="React是什么"></a>React是什么</h4><p>React是一个声明式，高效，灵活的JavaScript库，它可以用于实现用户接口。它使你可以通过少量，独立的代码（称为“Component”）来组成复杂的UI。</p><p>React有一定不同种类的组件（Component），我们将首先介绍<code>React.Component</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoppingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"shopping-list"</span>&gt;</span><br><span class="line">                &lt;h1&gt;Shopping List <span class="keyword">for</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;li&gt;Instagram&lt;/</span>li&gt;</span><br><span class="line">                    &lt;li&gt;WhatsApp&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;li&gt;Oculus&lt;/</span>li&gt;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage: &lt;ShoppingList name="Mark" /&gt;</span></span><br></pre></td></tr></table></figure><p>我们立刻接触到了这些像XML一样的标签。通过组件（Component），我们可以告诉React需要在屏幕上显示什么。当数据变化时，React会高效地重新渲染（render）组件。</p><p>这里的ShoppingList是一个<strong>React component class</strong>，或者说<strong>React component type</strong>。一个组件接受参数，参数名为props（properties的缩写）。组件的返回值是通过render方法渲染的一个有层次的视图结构（a hierarchy of views）。</p><p><code>render</code>方法返回一个对屏幕展示内容的说明。React接受render传入的说明并展示渲染成果。特别的是，<code>render</code>方法返回的是一个React元素（element），是一种轻量级的渲染说明。大部分的React开发人员会使用一种特殊的语法“JSX”，它可以使得渲染说明的结构便于书写。例如<code>&lt;div /&gt;</code>标签将会被编译器翻译成React.createElement(‘div’)。以上的代码片段等价于如下React代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>  React.createElement(<span class="string">'div'</span>, &#123;<span class="attr">className</span>: <span class="string">'shopping-list'</span>&#125;,</span><br><span class="line">        React.createElement(<span class="string">'h1'</span>, <span class="comment">/* ... h1 children ... */</span>),</span><br><span class="line">        React.createElement(<span class="string">'ul'</span>, <span class="comment">/* ... ul children ... */</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><a href="https://babeljs.io/repl/#?presets=react&amp;code_lz=DwEwlgbgBAxgNgQwM5IHIILYFMC8AiJACwHsAHUsAOwHMBaOMJAFzwD4AoKKYQgRlYDKJclWpQAMoyZQAZsQBOUAN6l5ZJADpKmLAF9gAej4cuwAK5wTXbg1YBJSswTV5mQ7c7XgtgOqEETEgAguTuYFamtgDyMBZmSGFWhhYchuAQrADc7EA" target="_blank" rel="noopener">点击这里查看完整扩展后的React代码</a></p><p>如果你对于createElement()方法的工作原理感到好奇，可以通过<a href="https://reactjs.org/docs/react-api.html#createelement" target="_blank" rel="noopener">API说明文档</a>来了解其中的细节，它在本教程中无须使用，我们会全程使用JSX。</p><p>JSX拥有JavaScript的全部功能。你可以在JSX的括号里添加任何JavaScript代码。每一个React元素都是一个JavaScript对象，你可以在程序中通过变量来存储或是遍历React元素。</p><p>ShoppingList组件仅会渲染一些React自带的DOM元素，例如<code>&lt;div /&gt;</code>和<code>&lt;li /&gt;</code>。你也可以编写自定义组件进行渲染。例如现在我们可以通过插入<shoppinglist>来渲染整个shopping list。每个React元素都会被封装，并且相互独立，这种设计允许设计者通过简单的组件来构建复杂的UI。</shoppinglist></p><h4 id="阅读初始代码（starter-code）"><a href="#阅读初始代码（starter-code）" class="headerlink" title="阅读初始代码（starter code）"></a>阅读初始代码（starter code）</h4><p>如果你选择在浏览器查看代码，在新标签页打开<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010" target="_blank" rel="noopener">这个链接</a>。<br>如果你选择在本地查看代码，只要在你的项目文件夹（搭建环境时创建的）中打开<code>src/index.js</code>即可。</p><p>这些代码是我们即将构造的应用的基础代码，我们已经提供了CSS，你只需要关注React学习和井字棋游戏的编写。</p><p>在阅读代码时你会发现代码中有三个React组件：</p><ul><li>Square</li><li>Board</li><li>Game</li></ul><p>Square组件渲染一个<code>&lt;button&gt;</code>，代表棋盘的一个正方形格子。Board组件渲染9个正方形格子。Game组件渲染了拥有多个placeholder的棋盘，在后面的教程中我们将要修改这部分代码。当前代码中没有组件之间的通信和互动。</p><h4 id="通过props传递数据"><a href="#通过props传递数据" class="headerlink" title="通过props传递数据"></a>通过props传递数据</h4><p>例如我们现在需要从Board组件向Square组件传递一些数据。</p><p>在Board代码中的<code>renderSquare</code>方法内，更改原代码，向Square传入一个<code>value</code>参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    renderSquare(i) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>在Square代码中，把<code>{/* TODO */}</code>更改为<code>{this.props.value}</code>，这样Square的<code>render</code>方法就可以展示value值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button className=<span class="string">"square"</span>&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>之前的渲染效果：<br><img src="https://reactjs.org/static/tictac-empty-1566a4f8490d6b4b1ed36cd2c11fe4b6-a9336.png" alt="原棋盘"></p><p>更改后，你可以在棋盘的每个格子（Square）中看到一个数字：<br><img src="https://reactjs.org/static/tictac-numbers-685df774da6da48f451356f33f4be8b2-be875.png" alt="更改后棋盘"></p><p><a href="https://codepen.io/gaearon/pen/aWWQOG?editors=0010" target="_blank" rel="noopener">点击此处查看完整代码</a></p><p>现在你已经实现了从父组件（Board）向子组件（Square）传递数据了。props的传递本质上就是信息在React应用中的传递，也就是数据在父组件和子组件之间的传递。</p><h4 id="编写可响应操作的组件"><a href="#编写可响应操作的组件" class="headerlink" title="编写可响应操作的组件"></a>编写可响应操作的组件</h4><p>现在我们需要在点击棋盘上的格子时，在格子里显示一个“X”标记。</p><p>第一步，按照如下代码修改Square组件中<code>render()</code>函数的返回值里的button标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                &lt;button className=<span class="string">"square"</span> onClick=&#123;<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">'click'</span>); &#125;&#125;&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">                &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>现在如果我们点击一个棋盘上的方格，我们将会得到一个alert消息。</p><p><strong>注意</strong>：为了简便书写和避免<a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">这种令人混乱的写法</a>，本教程将在编写所有的事件处理函数时使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button className=<span class="string">"square"</span> onClick=&#123;() =&gt; alert(<span class="string">'click'</span>)&#125;&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>注意这一句：<code>onClick={() =&gt; alert(&#39;click&#39;)}</code>，它将一个函数作为参数传入props中的onClick。它只会在单击后被触发，如果你忘记写<code>()=&gt;</code>而是写成了<code>onClick={alert(&#39;click&#39;)}</code>。那么每当这个组件被重新渲染时，alert就会被触发，这是一个很常见的错误。</p><p>下一步，我们需要被点击的Square组件“记住”自己被点击了，并用一个“X”标记来填充自己。为此，我们需要使用<strong>state</strong>。</p><p>React组件可以通过在构造器中设置<code>this.state</code>来配置并使用<strong>state</strong>属性。我们可以在Square组件的构造器中对<code>this.state</code>中定义一个value字段，来储存Square的当前状态，并通过点击来改变它。</p><p>首先我们需要给Square组件添加一个构造器，来初始化<strong>state</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            value: <span class="literal">null</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button className=<span class="string">"square"</span> onClick=&#123;() =&gt; alert(<span class="string">'click'</span>)&#125;&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.props.value&#125;</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在JavaScript类中，只要自身是一个子类，则总是需要在构造器的开头使用super(props)调用，因此所有拥有构造器的React组件类都需要在构造器的开头使用super(props)调用。</p><p>现在我们需要修改Square的<code>render</code>方法来展示Square被点击后的状态变化。</p><ul><li>在<code>&lt;button&gt;</code>标签中把<code>this.props.value</code>改成<code>this.state.value</code></li><li>把事件处理函数中的<code>()=&gt;alert()</code>改成<code>() =&gt; this.setState({value: &#39;X&#39;})</code></li><li>出于可读性考虑，将className和onClick函数分成两行书写</li></ul><p>做了以上修改后，Square组件的<code>render()</code>方法返回的<code>&lt;button&gt;</code>标签内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            value: <span class="literal">null</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;button</span><br><span class="line">            className=<span class="string">"square"</span></span><br><span class="line">            onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: <span class="string">'X'</span>&#125;)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>通过在<code>render()</code>函数的onClick中调用<code>this.setState</code>方法，我们使得这个组件每次<code>&lt;button&gt;</code>被点击时都会重新渲染。在重新渲染后，Square的value值就会变成‘X’，当你点击任意一个Square组件，棋盘上对应位置都会出现一个‘X’。</p><p>当你在一个组件的<code>render()</code>方法中调用<code>setState</code>，它的所有子组件也会被重新渲染。</p><p><a href="https://codepen.io/gaearon/pen/VbbVLg?editors=0010" target="_blank" rel="noopener">点击此处阅读完整代码</a></p><hr>]]></content>
    
    <summary type="html">
    
      本教程的内容是实现一个小游戏。实现这个小游戏过程中需要学习的技术是实现任何React应用的基础，通过实现这个小游戏，你会对React有更好的理解。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Building Cloud Applications with Microserivce Architecture</title>
    <link href="http://blog.aosabook.cc/2018/08/02/Building-Cloud-Applications-with-Microserivce-Architecture/"/>
    <id>http://blog.aosabook.cc/2018/08/02/Building-Cloud-Applications-with-Microserivce-Architecture/</id>
    <published>2018-08-02T07:27:15.000Z</published>
    <updated>2018-08-02T07:27:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Modern Technologies for Modern Web Applications</title>
    <link href="http://blog.aosabook.cc/2018/07/26/Modern-Technologies-for-Modern-Web-Applications/"/>
    <id>http://blog.aosabook.cc/2018/07/26/Modern-Technologies-for-Modern-Web-Applications/</id>
    <published>2018-07-26T07:47:59.000Z</published>
    <updated>2018-08-26T06:17:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Modern-Web-Application"><a href="#Modern-Web-Application" class="headerlink" title="Modern Web Application"></a>Modern Web Application</h1><p>当前的企业信息系统一般采用Web技术进行设计和开发，如图所示。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/webapp.png"><p>这是github上的某一位普通用户开发的他所在企业的Web应用的一个简化版本，代码位于<a href="https://github.com/DimitriZhao/sinosteel" target="_blank" rel="noopener">DimitriZhao/sinosteel</a>这个git仓库。之所以从这个系统开始讲，是因为这个系统用到了当前Web应用开发的主流技术栈，包括应用框架、开发工具和管理流程等。</p><p>这个系统的总体架构如下。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/architecture.png"><p>本文讲会从Web应用的历史讲起，讲讲为什么现在的Web应用会发展到这样一种架构，并针对其中各项技术做简介，希望能让读者快速理解Web应用开发框架。</p><h2 id="历史：从HTML到Web应用"><a href="#历史：从HTML到Web应用" class="headerlink" title="历史：从HTML到Web应用"></a>历史：从HTML到Web应用</h2><p>上世纪九十年代起，万维网（英语：World Wide Web，亦作“WWW”或“Web”）替代电子邮件成为了互联网最重要的应用。Tim Berners-Lee这位英国计算机科学家写了第一个浏览器供用户通过互联网访问一个个“网页”，从而快速获取各类信息，交换知识。网页用现在大家熟知的超文本标记语言（英语：HyperText Markup Language，简称：HTML）来展示内容，包括文字、图片视频、音频等，从而用令人赏心悦目的形式为大家带来了丰富多彩的内容。大多数的网页自身包含有超链接指向其他相关网页，这样通过超链接，把有用的相关资源组织在一起的集合，就形成了一个所谓的信息“网”。（以上内容总结自Wikipedia<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">相关页面</a>）</p><p>因此九十年代到两千年这段时期，大家纷纷开始通过HTML这种语言来编撰出很多网页，并构建出一个个网站来为用户提供各类信息，以下是一个经典的Hello World程序的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML描述了一个网页的结构语义随着线索的呈现，也就是说HTML是定义了内容的展现方式，通过基本的HTML技术来实现网页并构建网站的过程，本质上来说是一个将一组静态内容发布出来以供用户消费的过程，当时著名软件公司发开了各类网页编辑器来进行网页开发，例如Dreamweaver、Frontpage等。静态网站的工作原理如下图所示。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/static.png"><p>不过人们很快就不满足于这种每次浏览器访问都看到一样内容的静态网页技术，在静态内容的发布的基础上有了动态内容的需要。最典型的就是当年各大门户网站上都有个“访客计数器”，页面每次被访问，这个计数器就递增，从而统计来访用户数量（实际上是页面被请求的数量）。当时一个网站的价值大概与这个数字成正比，数字足够大，就能把投入到这个网站开发的钱数直接加个零卖给下家。</p><p>要实现这样一个每次访问都呈现不同内容的页面，单纯的HTML就不行了，因此出现了所谓的动态网页技术。简单来说，动态网页就是把代码潜入到页面上去，每次用户请求时执行这段代码得到结果后再把结果返回给用户。CGI是当时最为著名的用来实现这一点的黑科技。<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">CGI</a>全称Common Gateway Interface，中文叫做通用网关接口，可以让一个用户从网页浏览器向执行在服务器上的程序请求数据（而不是直接获取一个静态页面）。其工作原理如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/dynamic.png"><p>当年一般用Perl语言来编写CGI程序，例如这段代码基于用户通过html的form传入到变量打印一个字符串。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!perl -w  </span></span><br><span class="line"><span class="keyword">use</span> CGI <span class="keyword">qw</span>/:standard/;  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">my</span> $cgi= new CGI;  </span><br><span class="line">  <span class="keyword">print</span> $cgi-&gt;header,  </span><br><span class="line">  $cgi-&gt;start_html(<span class="string">'A Simple Example'</span>),  </span><br><span class="line">  $cgi-&gt;h1(<span class="string">'A Simple Example'</span>);  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( $cgi-&gt;param())  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Your name is "</span>,  </span><br><span class="line">    $cgi-&gt;param(<span class="string">'name'</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  $cgi-&gt;end_html();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写CGI来实现动态内容展示存在一些问题，首先CGI代码运行在一个独立的进程中，效率和安全性都堪忧，其次，写起来很麻烦，CGI规范繁杂，perl语言也相当难学。因此不久以后出现了动态页面技术，例如php、asp、jsp等。例如我们可以用jsp写这么个页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>First JSP<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">double</span> <span class="attr">num</span> = <span class="string">Math.random();</span></span></span><br><span class="line"><span class="tag">    <span class="attr">if</span> (<span class="attr">num</span> &gt;</span> 0.95) &#123;</span><br><span class="line">  %&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>You'll have a luck day!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">num</span> %&gt;</span>)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    &#125; <span class="attr">else</span> &#123;</span></span><br><span class="line"><span class="tag">  %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Well, life goes on ... <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>(<span class="tag">&lt;<span class="name">%=</span> <span class="attr">num</span> %&gt;</span>)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    &#125;</span></span><br><span class="line"><span class="tag">  %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= request.getRequestURI() %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Try Again<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码和页面混合在一起使得页面的最终呈现是由这个页面再被用户请求时页面内的代码执行结果决定的，从而实现内容的动态展示。在此基础上，出现了更极端的技术（比如Java Servlet），直接对用户发来的请求解释并生成结果以及用来呈现结果的html。其工作原理如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/servlet.png"><p>以下为Servlet的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import required java libraries</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend HttpServlet class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      <span class="comment">// Do required initialization</span></span><br><span class="line">      message = <span class="string">"Hello World"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set response content type</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Actual logic goes here.</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// do nothing.</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以叫Servlet，是跟Java中的Applet技术对应的。Applet代表一个运行在用户端的小程序（小应用），Servlet则是运行在服务器端的一个应用。这个应用通过Web技术形式（以HTTP为通信协议，以HTML为内容格式）与用户交互，因此用Servlet或类似技术实现的Web系统，一般就称之为Web应用。</p><p>有兴趣的话可以Clone这个<a href="https://github.com/njuics/sa2017.git" target="_blank" rel="noopener">仓库</a>去运行一下ServletDemo这个例子。</p><h2 id="MVC-Web"><a href="#MVC-Web" class="headerlink" title="MVC Web"></a>MVC Web</h2><p>细心的你会发现，其实Java Servlet和早期的CGI技术原理上是一样的：用户发送一个HTTP请求到服务器，服务器端执行一段代码，代码产生结果，渲染为HTML结构的页面返回给用户。但为什么现在你主要用的时Servlet技术开发Web应用而不是CGI呢？因为现在我们在Servlet之上构造了一层MVC的设计模式。</p><p>之前那段Servlet代码中的<code>doGet()</code>函数是执行主体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set response content type</span></span><br><span class="line">      response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Actual logic goes here.</span></span><br><span class="line">      PrintWriter out = response.getWriter();</span><br><span class="line">      out.println(<span class="string">"&lt;h1&gt;"</span> + message + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当然这个例子中的<code>doGet</code>执行的逻辑过于简单了点，一般来说，我们在这个函数中做三件事：</p><ol><li>对方法参数对象<code>request</code>进行处理解析获得用户输入；</li><li>执行一段业务逻辑代码，对用户输入进行处理，得到一个业务层面的计算结果；</li><li>在方法参数对象<code>response</code>里讲计算结果用HTML的形式写入，让用户得到输出。</li></ol><p>如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/doget.png"><p>直接这么写的问题在于所有的输入处理、业务计算和输出组织都是混在一起的，特别时输出部分需要通过字符串拼接等方式形成一个比较负责的html页面去展示结果，为维护带来了很大的不便。程序员一般HTML写得很难看，但会做页面设计的美工又不懂得Java语言，所以直接这样写Servlet不利于分工后协作，效率极低。因此出现了将用HTML进行结果渲染这个过程独立出来的技术，一般称之为模板引擎（Template Engine），例如<a href="https://freemarker.apache.org/" target="_blank" rel="noopener">Freemarker</a>、<a href="http://velocity.apache.org/" target="_blank" rel="noopener">Velocity</a>和<a href="https://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf</a>等，从概念上看这种技术就是将应用的表现层独立了出来，如下图。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/ui.png"><p>这么做的好处很显然，你可以单独写一个模板，让美工做得很漂亮，然后在代码运行时用运行结果去填充这个模板，渲染成一个页面，具体可以参考下面这个例子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=ISO-8859-1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"ISO-8859-1"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Time Now:<span class="tag">&lt;/<span class="name">b</span>&gt;</span> $&#123;requestScope["time"]&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"time"</span>, <span class="keyword">new</span> Date()); <span class="comment">// 'time' would be  shown on JSP page             </span></span><br><span class="line">    RequestDispatcher view = request.getRequestDispatcher(<span class="string">"WEB-INF/templates/sample.jsp"</span>);      </span><br><span class="line">    view.forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来程序员和美工就可以愉快地在一起工作了。但从程序员的角度来看，还有一部分问题没解决，就是用户输入参数的处理和业务逻辑计算代码还是在一起的，不能分别维护。因此我们再次进行分割，变成以下的样子：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/mvc.png"><p>我们将业务逻辑部分再切出来，用户请求发送过来驱动Servlet的某个<code>doGet</code>方法开始运行，方法内主要负责的事时解析获得用户输入内容，将输入交给一个核心部件进行计算处理获得结果后再将结果交给模板引擎进行渲染，所以这个Servlet虽然没有做最核心的计算和漂亮页面的展示，但它控制了整个执行过程，称之为“控制器”；控制器解析出的用户输入内容被交给第二个部分进行计算处理，这个部分实际上就是系统的核心，执行的是关键性的计算过程，并得到一个计算结果，我们称之为“模型”；用来渲染这个计算结果的展示部分称之为“视图”。</p><p>仔细体会一下这样分割的好处，我想至少有这么几点：</p><ol><li>其他都不变的情况下，如果有调整页面设计，只要改HTML模板就行了，代码不用动；</li><li>如果一个核心算法要改进，那该模型的实现就行了，其他都不用动；或者说如果某个计算过程有新的实现，那让控制器调用新的模型实现就行；</li><li>如果用户输入参数改了，那我们可以在控制器层面把参数变动处理了，其他部分可以不受影响。</li></ol><p>因此这样一来，你可以找三个人分别来干这三件事。这实际上是软件技术中一直孜孜以求的一个模板，叫做<a href="https://zh.wikipedia.org/wiki/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB" target="_blank" rel="noopener">“关注分离”(Separation of concerns，SOC)</a>。</p><p>下面开始进入正题：Spring MVC。</p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring是一个开源框架，为简化企业级应用开发和运行管理而生。早期Spring指的是一个IoC(DI)和AOP容器框架，叫Spring Framework。关于IoC（Inversion of Control，中文叫“反转控制”）、DI（Dependency Injection，中文叫“依赖注入”）和AOP（Aspect-Oriented Programming，中文叫“面向切面编程”）等概念在后面逐步展开介绍。这些都是非常重要的软件技术概念。<br>Spring目前成为了应用最广泛的Java开发框架，甚至连早期特别红火的EJB技术也基本完全没落了，主流的企业级应用十之八九都以Spring为平台，这主要是由于Spring在此核心框架基础之上衍生出了<a href="http://spring.io/projects" target="_blank" rel="noopener">很多项目</a>来提供面向应用开发的完整框架、工具等，被称之为”Spring全家桶”。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/spring.png"><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>Spring在其核心框架Spring Framework中提供了Web应用开发支持。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/springframework.png"><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Spring的Web支持开发MVC模式的Web应用。具体而言，Spring预先实现了一个特定的Servlet叫做<code>DispatcherServlet</code>，这个Servlet会根据用户的配置，将不同的请求（URL）转发给不同的代码（Controller）进行处理，Controller处理完得到结果将结果渲染到一个页面中返回给用户。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/springmvc.png"><p>这其中涉及到一些内部技术，例如<code>HandlerMapper</code>、<code>ViewResolver</code>等，但这些跟用户在业务层编程关系不大，所以目前无需了解得过细，原理知道即可。</p><h3 id="示例工程及相关工具"><a href="#示例工程及相关工具" class="headerlink" title="示例工程及相关工具"></a>示例工程及相关工具</h3><p>快速学习一项具体技术的方法不是去买本很厚的书回来从头开始看，而是找个例子当葫芦，然后你照着画个瓢。国内很多热心人士也在网上po出很多例子，但一般而言各人在技术理解的层面上深度准确度都不尽相同，这些例子一般也不随着技术本身的发展而同步更新，因此还是尽量找权威机构的技术材料来看会比较好。Spring公司在其<a href="https://spring.io/" target="_blank" rel="noopener">官方网站</a>上提供了一系列很好的<a href="https://spring.io/guides" target="_blank" rel="noopener">教程</a>让开发人员可以快速了解技术，后面我们会讲到这中间的若干篇。</p><p>我们先来看教程中关于Web应用的一个最简单例子–<a href="https://spring.io/guides/gs/serving-web-content/" target="_blank" rel="noopener">Serving Web Content with Spring MVC</a>。</p><p>这篇教程中要我们用<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>工具获取示例代码。Git是一个目前最流行的版本控制工具，相比原来普遍使用的CVS、SVN等有很多优势。现在最热门的开源网站<a href="https://github.com/" target="_blank" rel="noopener">Github</a>实际上就是一个对上百万（可能上千万）个仓库进行管理、分享的系统。关于Git工具的使用可以看一下简要介绍，比如<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">这个</a>。简言之，你现在先从<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a>上下载git并安装，然后用clone命令获取代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/spring-guides/gs-serving-web-content.git</span><br></pre></td></tr></table></figure><p>然后进入代码仓库目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> gs-serving-web-content</span><br></pre></td></tr></table></figure></p><p>你会看到其中有<code>initial</code>和<code>complete</code>两个目录（和其他的一些文件目录）。教程想让你从一个工程的最初创建状态（<code>initial</code>中所含的内容）开始，一步一步操作，最后到达完成状态（<code>complete</code>中的内容）。为简单起见，我们就直接讲解一下后者，关于这个目录中的代码和资源文件怎么创建怎么编辑开发的过程可以仔细读教程。</p><p><code>complete</code>目录下存在多个各个文件夹和文件，其中<code>src</code>目录内是项目的源代码和相关资源文件，其他的则是用来对这些源代码和资源文件进行编译、连接、打包等处理过程的“构建工具”需要的内容。</p><p><strong>构建工具</strong>是一个把源代码生成可执行应用程序的过程自动化的程序（例如Android app生成apk）。如果你之前主要用eclipse开发，那可能觉得构建工具这个概念比较陌生，但构建工具这个概念和技术已经存在了几十年了，如果你在Unix/Linux系统下软件开发的或者在Unix/Linux下从别人开发的源代码进行软件安装的话，一定知道“Makefile”这个文件，这个文件实际上就是告诉<code>make</code>这个构建工具如何编译代码、如何最后生成可执行文件的一个配置文件，有兴趣的话可以读一下这篇<a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">Make 命令教程</a>。</p><p>我们在这个工程中以及以后的示例中都会使用构建工具来进行编译运行等操作，而不是用eclipse。也许你觉得这件事情挺难理解的，为什么不用eclipse呢？那我告诉你用构建工具的重要优势之一：它可以帮你进行<strong>依赖管理</strong>。我们在用eclipse开发的时候，通常都会用到第三方的一些库（Library），在eclipse中我们可以在项目配置页中指定一个目录作为Library，告诉eclipse要从那里面去搜索你所要用到的类，然后你可以从网上去下载一堆jar文件，放入这个Library文件夹中，但如果项目依赖的jar很多，这件事就会比较累，而且你引入的jar可能又以来其他jar，你还得把其他jar也下载下来放进去，更复杂的是每个jar还有版本，你要非常仔细地选择合适的版本，这就会让你很头疼。如果某个jar更新了你希望保持同步，那之前做过的事情又要重新来一遍。这就是手工进行依赖管理的过程。使用构建工具的话，这个过程就会自动化完成。</p><p>互联网上有个网站<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a>，这个网站上维护了1100万左右的jar包，你可以用构建工具随意来获取你所需要的jar，这个工具的名称叫[Maven]<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a>。<code>complete</code>目录下的<code>pom.xml</code>就是一个配置文件，告诉Maven你依赖的jar包有哪些，你的代码怎么编译，编译后如何运行等等。<code>mvnw</code>和<code>mvnw.cmd</code>是两个用来运行Maven的脚本文件，暂时可以不用管。另外<code>build.gradle</code>、<code>gradle</code>、<code>gradlew</code>和<code>gradlew.bat</code>是另外一套构建工具Gradle所需的配置和脚步。早期只有Maven这个工具，后来有人觉得Maven用xml作为配置文件太繁琐，所以开发了gradle，而gradle跟Maven一样还是从mvnrepository搜索下载依赖，构建过程的原理也一样。</p><h3 id="构建并运行"><a href="#构建并运行" class="headerlink" title="构建并运行"></a>构建并运行</h3><p>所以目前我们简单点，只看Maven，请从Maven官方网站下载并安装Maven工具，如果你在complete目录下运行以下命令正确了，说明你之前的这些步骤都做对了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><p>第一次运行的话可能需要等待很久，时间主要被Maven花在从网络上下载这个工程所需要的依赖文件。等待几分钟（网络慢的话可能需要十几分钟）后，这个应用就会运行起来。用浏览器访问<code>http://localhost:8080/</code>即可。首页上有链接引导你访问<code>http://localhost:8080/greeting</code>，得到<code>Hello, World!</code>这个结果页面，你也可以在url后面加上<code>name</code>参数，例如访问<code>http://localhost:8080/greeting?name=John</code>得到<code>Hello, John!</code>结果页面。</p><blockquote><p>Checkpoint: 完成这一步的话至少你的开发环境目前基本配置正确了。</p></blockquote><p>显然，它运行起来看起来是个web工程，而且你如果足够细心的话会发现刚才运行的时候控制台日志里有这样的几行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-08-10 13:50:40.558  INFO 1444 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2018-08-10 13:50:40.584  INFO 1444 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2018-08-10 13:50:40.584  INFO 1444 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.31</span><br></pre></td></tr></table></figure><p>这意味着刚才的运行过程中Tomcat应用服务器和Servlet引擎被启动。但跟之前开发Web应用不一样，我们没有把工程打包为war然后部署到一个独立运行的Tomcat，这个工程像是直接自动完成了打包war、启动tomcat、部署war这些所有步骤。</p><p>我们打开代码看看这到底是怎么回事吧。</p><h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><p>我们可以用IDE打开代码，推荐使用<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>，当然这个开发工具是要钱的。不想买的话可以用微软发布的<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>（简称Code）。Code实际上只是个编辑器，不是集成开发环境，因为我们可以用Maven进行自动化构建，所以用Code看代码写代码也就足够了。Code具有非常开放的架构，很多第三方的插件使得Code实际上非常强大，推荐使用。</p><p>用Code打开<code>complete</code>目录，其中<code>src/main/java/</code>是代码所在目录，之所以有这个目录结构是Maven工程的规范要求。工程名空间是<code>package hello</code>，所以<code>src/main/java/hello</code>是Java文件代码实际所在之处，包括<code>Application.java</code>和<code>GreetingController.java</code>。</p><p>首先我们要看的不是这些java文件，而是位于<code>complete</code>目前下的<code>pom.xml</code>文件。POM是Project Object Model的缩写，代表工程对象模型，也就关于工程和各种配置细节的信息，Maven使用这些信息构建工程。详细信息可以参考<a href="http://wiki.jikexueyuan.com/project/maven/pom.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/maven/pom.html</a>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gs-serving-web-content<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中</p><ol><li><code>&lt;groupId&gt;</code>、<code>&lt;artifactId&gt;</code>、<code>&lt;version&gt;</code>三个tag合起来说，当前这个工程是<code>org.springframework</code>这个组织的，工程名叫<code>gs-serving-web-content</code>，版本是<code>0.1.0</code>，这很好理解；</li><li><code>&lt;dependencies&gt;</code>这个tag里定义了当前工程直接依赖的第三方库（或称为“包”），例如当前工程依赖于<code>org.springframework.boot</code>组织开发的<code>spring-boot-starter-thymeleaf</code>这个库，Maven工具根据这个信息会自动从mvnrepository里下载对应的jar，你也可以直接访问<a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf" target="_blank" rel="noopener">网页</a>；</li><li><code>&lt;properties&gt;</code>里可以定义一组属性（变量值）；</li><li><code>&lt;build&gt;</code>下的<code>&lt;plugins&gt;</code>里定义当前工程构建需要用到的插件，这里我们用了一个<code>spring-boot-maven-plugin</code>插件，正是这个插件使我们能运行<code>mvn spring-boot:run</code>；</li><li><code>&lt;parent&gt;</code>标签定义了这个POM的上一级（父）POM，上一级POM中定义的属性、依赖、插件等都可以被复用。</li></ol><p>然后看一下<code>GreetingController</code>这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(@RequestParam(name=<span class="string">"name"</span>, required=<span class="keyword">false</span>, defaultValue=<span class="string">"World"</span>)</span> String name, Model model) </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"greeting"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类也很简单，定义了一个<code>greeting</code>方法，该方法上有个注解（Annotation），其含义比较直观：</p><ol><li>为方法<code>greeting</code>标上注解<code>@GetMapping(&quot;/greeting&quot;)</code>意味着当前这个方法负责处理用户发来的<code>GET /greeting</code>这个请求；</li><li>为参数<code>name</code>标上注解<code>@RequestParam(name=&quot;name&quot;, required=false, defaultValue=&quot;World&quot;)</code>意味着从请求中取查询参数<code>name</code>作为这个参数的值，缺省为<code>World</code>。</li><li>为类<code>GreetingController</code>标上注解<code>@Controller</code>意味着当前这个类是一个<strong>控制器</strong>;</li></ol><p>结合我们前面说的MVC的技术理念，有过Web开发经验的就应该看得懂，这就是一个可以响应用户的一个具体请求的Web应用控制器类。然后看<code>Application.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码刚学Java时你就能读懂，这个类里只有一个<code>main</code>函数，调用了<code>SpringApplication</code>类的<code>run</code>方法。</p><p>那这两个类存在了为什么我们运行<code>mvn spring-boot:run</code>就能启动出Tomcat并部署一个包含了<code>GreetingController</code>这个控制器的war呢？这一切的神奇来自于<code>Application</code>类上的<code>@SpringBootApplication</code>这个注解。这个注解解释起来就费劲了，它实际上是Spring三年前才发布的一项新技术：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>。其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。平时如果我们需要搭建一个web项目的时候需要配置web.xml、配置数据库连接、配置事务、配置加载配置文件的读取、配置日志文件等等，但是如果使用spring boot呢？很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目。</p><p><strong>简单而言，加了<code>@SpringBootApplication</code>这个注解后，Spring底层系统会根据我们的项目信息来帮你进行自动化的配置，比如我们在POM中写了对<code>spring-boot-starter-web</code>的依赖，Spring会猜到我们是要开发一个Web应用，因此帮我们自动启动了Tomcat服务器。同时Spring发现有一个类标注了<code>@Controller</code>，说明这是个控制器类，Spring会自动创建这个类的对象（这里用到了Spring Framework中的Bean构件管理和依赖注入等底层技术），并自动为Tomcat里运行的DispatcherServlet配置请求转发规则，让所有<code>GET /greeting</code>请求被<code>GreetingController</code>这个控制器的<code>greeting</code>函数所处理。</strong></p><p>上面说的<code>mvn spring-boot:run</code>这种方式可以启动当前Spring Boot工程的运行，也可以这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">java -jar gs-serving-web-content-0.1.0.jar</span><br></pre></td></tr></table></figure><p><code>mvn package</code>把当前这个工程编译，打包为一个jar，jar文件存放在<code>target</code>目录下，注意这个jar可以独立运行。这个jar中包含了当前这个应用运行所需的所有东西，只要有java环境就能运行这个应用，这为后面支撑<strong>微服务</strong>架构提供了一个完美的技术方案。</p><blockquote><p>关于微服务，我们会在“<a href="/2018/08/02/Building-Cloud-Applications-with-Microserivce-Architecture/" title="基于微服务架构开发面向云计算的应用系统">基于微服务架构开发面向云计算的应用系统</a>”这篇中详细说。</p></blockquote><p>这个例子中的<code>greeting</code>函数的第二个参数<code>model</code>就是用来存放模型对象的，方法返回一个字符串<code>greeting</code>，即告诉系统greeting函数结束后，用名字叫<code>greeting</code>的视图模板（<code>resources/templates/greeting.html</code>）渲染<code>model</code>里的数据，然后返回给用户。这过程跟早期的Struts框架处理流程很接近，此处不赘述。</p><p>这个例子很简单，其中主要的特点在于用了Spring Boot来自动配置整个应用。下面看一个经典的更完整的例子。</p><h2 id="Spring-PetClinic"><a href="#Spring-PetClinic" class="headerlink" title="Spring PetClinic"></a>Spring PetClinic</h2><p>Java技术流行了很多年，特别是EJB技术推动了Java成为企业应用开发的首选。当年Sun公司（现在已经被Oracle收购）为了让程序员有效快速了解EJB技术体系，给了一个很典型的示例工程（Java Pet Store，一个在线的宠物商店）。Java EJB技术（现在叫Java EE）目前逐步没落了，Spring快速流行起来，并用一个类似的示例工程来方便技术学习。这个工程叫Pet Clinic（宠物医院）。</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/petclinic.png"><p>这个例子很有代表性，并且有很多版本来展示不同的技术，甚至微服务架构的应用开发也是基于这个例子来讲解。所以请先熟悉一下这个例子本身。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/spring-projects/spring-petclinic.git</span><br><span class="line"><span class="built_in">cd</span> spring-petclinic</span><br><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>打开代码，主要看一下那些Java文件。当然这个工程中还存在很多关于配置、模板和样式等的文件，其内容先暂时不解释，实际项目开发中可以再仔细看，我们先讨论代码设计层面的概念。</p><p>工程总体架构大体如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/petclinic-framework.png"><p>代码细节方面也不繁杂，我们选取其中部分类(宠物及其主人）的关系能看到以下关系：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/petclinic-class.png"><p>这个工程是典型的MVC结构。<code>/resources/templates</code>下是页面模板，这些模板填上数据后成为用户看到的界面（视图），在此视图上用户可以进行操作（例如点击链接导航或按钮发送数据）发出用户请求，控制器会收到用户请求，并根据映射关系（<code>@GetMapping</code>或<code>@PostMapping</code>）执行某个特定方法处理请求。一般而言这些控制器会处理数据的增删改查操作，这些数据操作会调用<code>Repository</code>类的方法来执行，并将执行结果返回给用户。</p><p>这里所说的数据是代码中的<code>Owner</code>/<code>Pet</code>/<code>Vet</code>/<code>Visit</code>等及相关父类型。这些类型在这儿很像经常会说到的DTO或者VO，但实际上不一样，而且是很不一样。</p><ul><li>首先，在这个例子中这些类型上加了很多注释，例如<code>@Entity</code>,<code>@MappedSuperclass</code>,<code>@Id</code>, <code>@Table</code>,<code>@Column</code>,<code>@OneToMany</code>,<code>@NotEmpty</code>等等。这些注释的存在是因为在这个例子中用了<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84" target="_blank" rel="noopener">对象关系映射</a>（ORM）技术来实现数据持久化。ORM简单来说就是可以将一个对象状态自动保存到关系型数据库或从关系型数据库取出数据还原出一个对象来的技术。这相对于传统意义上手工书写（拼接）SQL查询字符串来说非常简单高效。这些定义了需要将其对象持久化的类成为<strong>实体类</strong>，其中的那些注释给实现ORM的底层技术提供了信息以实现自动的双向映射。例如<code>Owner</code>类标注了<code>@Entity</code>和<code>@Table(name = &quot;owners&quot;)</code>，说明这是个需要ORM技术将其对象保持到数据库的实体类，并且这个类的对象状态保存在一张叫<code>owners</code>的表里（每个对象对应表的一行），<code>@Column(name = &quot;address&quot;)</code>注释告诉ORM<code>Owner</code>类的<code>address</code>属性对应这个表中的<code>address</code>列，且不能为空(<code>@NotEmpty</code>)。</li><li>其次，也是<strong>更重要的一点</strong>，<strong>这些类型实际是重要系统核心</strong>。我们开发一个信息系统，其最根本目的是希望通过这个系统让用户能够对某个领域下的信息进行管理，例如企业内的人事管理系统，那就是要正确地维护人员信息（新增人员、删除人员、查询人员、更新人员信息）或者在此基础上进行一些业务（例如在企业规定的上限以下为某个人加工资），我们所写的视图（页面）是为了为用户渲染这些信息或让用户出发对信息操作的行为，我们所写的控制器是为了接收用户的行为或选择一个视图去展示行为的结果，而系统真正的“计算”则是在视图和控制器之外的。因此在上面的架构图中仓库类和实体类是系统的模型。而其中重中之重是那些实体类。实体类真正刻画了当前这个信息系统到底是管理的那些信息，他们之间存在什么关系。如下图所示，我们可以看出当前系统中我们管理的Owner（宠物主人）和Vet（兽医）都是Person（人），每个Owner可以拥有多个Pet（宠物）而每个Pet只能被一个Owner拥有，每个Pet可以拥有多个/次Visit（探望记录）而每次Visit都是针对一个Pet的。这些是我们对当前这个宠物医院的业务的理解，可以称为“领域知识”。Repository类当对来说没那么重要，可以理解为是这些领域知识的接口暴露（这句话不很严谨），但这些接口提供的增删改查操作，都得以维持实体类本身数据合法性和他们之间的关系合法性为基本条件，因此这些领域知识是系统核心所在。对不对？</li></ul><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/petclinic-entity.png"><p>这个例子从设计的角度来看其实并不好，他的主要目的是展示Spring对MVC基本结构应用的支持，和其中的一些重要特效，例如Spring Data JPA等。（后续补充）</p><h3 id="一个改进版本"><a href="#一个改进版本" class="headerlink" title="一个改进版本"></a>一个改进版本</h3><p>有人觉得官方这个例子实际上并不好，做了些改进，放在以下地址：</p><p><a href="https://github.com/spring-petclinic/spring-framework-petclinic" target="_blank" rel="noopener">https://github.com/spring-petclinic/spring-framework-petclinic</a></p><p>请注意看这个工程的说明文件（readme.md），用以下命令启动运行这个工程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn tomcat7:run-war</span><br></pre></td></tr></table></figure><p>我们先来看看这个版本的代码有什么改变，主要包括三点：</p><ul><li>这个工程不是Spring Boot应用了，工程是个普通web工程，打包为war；</li><li>在<code>Controller</code>和<code>Repository</code>中间封装了一层<code>Service</code>（<code>ClinicService</code>）；</li><li><code>Repository</code>层定义为一组接口，并提供了JDBC、JPA和Spring Data JPA等三种持久化技术的实现方式。</li></ul><p>结构上如下图所示：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/petclinic-framework-v2.png"><p>这三点不同的第一点并不涉及在设计上的改进，只是把当前工程按传统方式打包部署运行。你可以看到在pom.xml中有这么一行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且在plugin里使用了一个<code>maven-war-plugin</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failOnMissingWebXml</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnMissingWebXml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://maven.apache.org/plugins/maven-war-plugin/" target="_blank" rel="noopener">这个插件</a>负责将工程打成一个war包：</p><blockquote><p>The WAR Plugin is responsible for collecting all artifact dependencies, classes and resources of the web application and packaging them into a web application archive.</p></blockquote><p>并且还用了一个<code>tomcat7-maven-plugin</code>，<a href="http://tomcat.apache.org/maven-plugin-2.0/tomcat7-maven-plugin/" target="_blank" rel="noopener">这个插件</a>让我们打包的war能直接在一个tomcat7服务器中部署运行。</p><blockquote><p>The Tomcat7 Maven Plugin provides goals to manipulate WAR projects within the Tomcat servlet container version 7.x</p></blockquote><p>我们之所以用<code>mvn tomcat7:run-war</code>而不是<code>mvn spring-boot:run</code>也正是因此。</p><p>关于Maven实际上有很多可以说的，但暂时不能铺开，有兴趣的可以先看看上面提到的<a href="http://wiki.jikexueyuan.com/project/maven/" target="_blank" rel="noopener">Maven中文教程</a>。</p><p>关于第三点不同，即把<code>Repository</code>层定义为一组接口并提供三种持久化技术的实现方式，这使得持久化的接口和具体实现分离开来，你可以如例子中一样用不同的技术来实现同一组接口：</p><ul><li>JDBC是最为传统的一种实现，通过在JDBC驱动上执行SQL查询来操作数据库存取数据，理论上来看JDBC实现具有最大的灵活性；</li><li>JPA是Java的持久化标准，按照ORM的基本思想（使用一个<code>EntityManager</code>进行自动化的对象关系映射）定义了一组标准的Java注解，主流的Hibernate就是JPA的一个实现；</li><li>Spring Data JPA在JPA的基础上又进行了封装，进行更加简便的持久化操作，你会惊奇地发现这个工程中<code>SpringDataXXXRepository</code>类型都是接口，具体查询实现可以通过注解进行标记，框架就能帮你自动实现接口方法和对应仓库类；你也可以一个方法都不需要定义和实现，框架会帮你自动生成；你甚至可以用近似自然语言的方式写一个接口方法，Spring能知道你要的是什么。</li></ul><p>Spring Data JPA确实是很强大，可以看一下<a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" target="_blank" rel="noopener">官方文档</a>。嫌看英文累的话也可以看看国内人写的一些技术文章，例如<a href="https://www.jianshu.com/p/38d27b633d9c" target="_blank" rel="noopener">这篇</a>。这部分后续再补充。</p><p>最后来谈一下第二点改进。我们在<code>Repository</code>和<code>Controller</code>之间加了一个<code>Service</code>层。首先这样做了以后，运行流程就发生了一些变化：用户请求由<code>Controller</code>收到并处理后，决定调用<code>Service</code>的某个具体方法，<code>Service</code>在执行过程中可能会创建或删除实体对象、更新实体对象状态，这些变化通过调用<code>Repository</code>层对象方法进行实施，得到结果后Service返回给<code>Controller</code>，继而再返回给用户（通过View进行渲染后）。</p><p>反复揣摩一下这个过程，你会发现这其中的各部分分工是很明确：</p><ol><li><code>Controller</code>负责从请求中获得用户输入，根据输入决定系统应该做什么，并将做的结果或异常返封装为响应发送给用户（决定通过什么视图去展示给用户看）。这边所说的请求和响应实际上跟通讯协议是有关系的。比如，因为一般Controller通过HTTP协议对外通信，所以用户请求参数需要从HTTP的请求URL中获取，因此有些Controller方法中使用<code>@PathVariable</code>来提取查询字符串中的某个参数值。因此Controller的另一个实际作用是进行了通信协议的隔离，使得Controller之后的各个组件（Service/Repository等）完全不需要考虑这个系统所运行的具体环境的。这意味着如果设计得好，那你这个系统很容易换一个MVC框架，甚至你可以把系统迁移到一个RPC通信框架下。</li><li><code>Service</code>负责做具体的业务过程。例如如何新注册一个用户，如何为用户登记一个宠物等，也就是实现了如何正确维护的信息的业务逻辑，比如用户注册时如果输入的身份证号码跟一个已有用户相同，那当前这个注册就不能进行。这些逻辑也是信息系统的核心，这些逻辑在执行时当然肯定涉及到实体类型<code>Entity</code>。还记得我们曾经说过的么？实体类定义的信息和信息之间的关系也是系统的核心。因此，合起来看，<strong><code>Service</code>和<code>Entity</code>属于一个信息系统内在表达的核心领域知识</strong>。而<code>Repository</code>实际是不是必须的。想象一下，如果你的系统是从来不关机的（也不会断电）可以一直运行下去，并且内存足够大所有数据都可以存在内存，那你为什么需要将数据持久化呢？没有数据库，信息系统还是信息系统。因此，<strong>一个信息系统设计和实现的关键是清楚正确地辨识出这个系统所处理的业务，并在业务过程中正确维护所涉及到的信息及其间关系</strong>，这称之为<strong>领域建模</strong>。开发一个系统的过程应该是从领域建模开始的，而不是首先建表去考虑持久化问题，将领域问题弄清楚并通过计算机系统实现出来，在必须的时候再将数据持久化保存，这才是系统开发的有效方法，称之为<strong>领域驱动开发</strong>。这个词内在含义很深厚，后续补充。</li><li><code>Repository</code>可以看作是一种辅助设施，用来在需要的时候帮系统将数据进行外部持久化，从概念上来看，它并不那么重要。但从技术上来看，它很关键，特别是关注系统运行性能的时候。</li></ol><p>以上这段需要你仔细理解一下，实际上就是这么两个重点：</p><ol><li>真正的业务在<code>Servcie</code>开始的这部分，<code>Controller</code>中不应该包含任何业务逻辑，Controller应该只做从HTTP或其他协议的原始请求中剥离出用户输入，交给合适的Service部件调用合适的业务方法，Service执行业务方法，进行计算，维护实体状态和关系，并在需要时调用仓库类方法将实体持久化到外部存储或从外部存储恢复出某个实体对象，Service执行结束后的结果再由Controller进行处理用某种形式返回给用户；</li><li>系统开发应首先从领域知识的梳理和实现着手，也就是说你需要先进行领域建模，你应该先想好系统中有那些信息是要维护管理的，这些信息是什么关系，维护管理他们的过程是怎么样的一个过程。前者可以通过类图表达，后者可以通过时序图表达，你还可以通过逻辑公式等方式表达业务内存在的一些约束条件，然后把这些图和约束关系通过代码实现出来。相比于从数据库为出发点的开发方法，领域建模带来的好处会是很明显的，因为领域模型直接反映你对领域知识的理解，你所谓的“懂业务”实际上就是能建立一个显式化的领域模型。领域建模有一整套思维方式和实践方法，具体的以后慢慢补充。</li></ol><h2 id="前后端分离架构"><a href="#前后端分离架构" class="headerlink" title="前后端分离架构"></a>前后端分离架构</h2><p>上面这个改进的工程在设计方面结构比较清晰了，但还存在一个问题，就是用户视图还是通过HTML模板渲染的（这个例子中用了<a href="https://zh.wikipedia.org/wiki/JSTL" target="_blank" rel="noopener">JSTL</a>）。通过这种技术去呈现交互页面给用户存在几个问题：</p><ol><li>用户在页面上进行的操作每次都需要传输回后台服务器进行处理，然后渲染新的页面（或部分页面）再次呈现给用户，这一过程中系统与用户的交互性较差；</li><li>页面开发与后端逻辑开发混合在一起，页面（前端）工程师与后端工程师间难以协调，特别是调试过程会变得较为混乱；</li><li>如果需要负载均衡的集群化部署，前端修改会需要整个集群中所有实例进行重新部署，维护开销巨大。</li></ol><p>因此现代的Web工程一般会将前后端分离开。也就是按照最开始我们给出的这张架构图来进行系统架构</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/architecture-annotated.png"><p>再一次，好心人士将PetClinc进行了改写成了一个前后端分离的工程。我们先看后端工程：</p><p><a href="https://github.com/spring-petclinic/spring-petclinic-rest" target="_blank" rel="noopener">https://github.com/spring-petclinic/spring-petclinic-rest</a></p><p>跟前一个版本相比，主要区别在于原来那些Controller上的注解从<code>@Controller</code>变为了<code>@RestController</code>。简单来说<code>@Controller</code>意味着这个Controller返回的是一个View，将其渲染后返回给用户，而<code>@RestController</code>意味着这个Controller返回的是值（对象），这个值（对象）一般转为Json格式后直接输出给用户。另外工程中加入了用户认证（包括跨域）和数据序列化技术等。这些后续补充解释。</p><p>拿到这个数据对象后，如何将这个结果展示给用户看那就是另一个问题了，这个问题就是后面我们会继续介绍的前端工程。这个不渲染页面呈现结果给用户的工程直接返回了数据，整个工程提供了一组接口来为用户提供获得信息的服务，这组接口跟你一般编程时候调用的函数是一样的概念，差别只是你给他传入的参数和得到的结果采用的是<a href="https://www.json.org/" target="_blank" rel="noopener">JSON</a>这种格式（也可以用别的数据格式，但JSON目前是最流行的轻量级格式）。</p><p>当前这个工程本身比较容易理解，其中引入了一个新工具，叫<a href="https://swagger.io/" target="_blank" rel="noopener">Swagger</a>。你可以按readme.md里所说运行起改工程后访问这个URL</p><p><a href="http://localhost:9966/petclinic/swagger-ui.html" target="_blank" rel="noopener">http://localhost:9966/petclinic/swagger-ui.html</a></p><p>你会发现一个漂亮的页面，这个页面上列出了各个Controller实现的用户可调用的接口，你甚至可以直接在这个页面上为接口编写文档，并且还能直接测试这个接口。这是个很有用的工具！</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/swagger.png"><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>接口这个概念大家都知道，为什么我们现在需要把开发出来的这些接口叫做REST接口呢？实际上我们在前面的几个例子中我们写的Controller里的方法就是接口，只不过这些接口调用后用户得到的结果会是渲染过的一个页面。这其中有个问题，就是接口的名称是怎么设计的。看一下<code>spring-framework-petclinic</code>工程中的<code>OwerController</code>里的两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/owners/&#123;ownerId&#125;/edit"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">initUpdateOwnerForm</span><span class="params">(@PathVariable(<span class="string">"ownerId"</span>)</span> <span class="keyword">int</span> ownerId, Model model) </span>&#123;</span><br><span class="line">    Owner owner = <span class="keyword">this</span>.clinicService.findOwnerById(ownerId);</span><br><span class="line">    model.addAttribute(owner);</span><br><span class="line">    <span class="keyword">return</span> VIEWS_OWNER_CREATE_OR_UPDATE_FORM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/owners/&#123;ownerId&#125;/edit"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processUpdateOwnerForm</span><span class="params">(@Valid Owner owner, BindingResult result, @PathVariable(<span class="string">"ownerId"</span>)</span> <span class="keyword">int</span> ownerId) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> VIEWS_OWNER_CREATE_OR_UPDATE_FORM;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        owner.setId(ownerId);</span><br><span class="line">        <span class="keyword">this</span>.clinicService.saveOwner(owner);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/owners/&#123;ownerId&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要看懂这两个方法到底是干嘛用的，你可以看方法名称：<code>initUpdateOwnerForm()</code>和<code>processUpdateOwnerForm()</code>，你会发现这两个方法都映射到<code>&quot;/owners/{ownerId}/edit&quot;</code>这个URL上，前者绑定到是<code>GET</code>方法后者是<code>POST</code>方法。英文够好的话大概能猜出来前者提取某个Owner信息后放在一个页面上等待用户进行更新操作，后者用POST过来的数据更新某个Owner的信息。如何跟用户沟通这些接口的语意（语意指的是：接口是干什么用的，怎么调用，返回什么，会在什么情况下出现什么错误）呢？这里的用户可能包括测试人员（帮你用<a href="https://www.getpostman.com/" target="_blank" rel="noopener">Postman</a>等测试工具测试你的Controller方法）、页面开发人员（需要知道页面上的链接如何写，Form的Action如何写等）和一般用户（也许有些用户愿意直接访问URL）。这些用户可能看不到或看不懂你的代码，或者不愿意去看你的代码，那唯一的交流方法就是给他们写一个文档。</p><p>你为什么会要写这个文档呢？因为你给的接口定义是你自己随意定的，写接口的人和用接口的人之间不存在共同认识，所以写出来的接口用的人看不懂，需要额外写文字说明。这个共同认识应该是什么呢？</p><!-- 设计不反映信息世界的本质。一个良好的接口设计，实际上是不需要文档说明的。人甚至机器可以根据接口本身正确产生对其的语意认识。 --><p>这个问题实际上在我们现在天天用的HTTP协议设计之初设计者就已经想好了。这个设计者就是<a href="https://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="noopener">Roy Thomas Fielding</a>博士。他是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。Fielding博士在他2000年发表的博士论文《Architectural Styles and the Design of Network-based Software Architectures》中，提出了一个叫做REST的网络应用架构风格。REST这个词是Representational State Transfer的缩写，中文翻译叫做<a href="https://zh.wikipedia.org/zh-hans/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2" target="_blank" rel="noopener">表现层状态转换</a>。简而言之，REST是一种设计原则，以便设计实现功能强、性能好、适宜通信的互联网应用系统。</p><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>撇开高深的理论不谈，REST架构中给出了互联网应用设计的一个核心思想。回想我们之前所说，我们开发一个信息系统，其目的就是希望能正确有效地管理信息。而互联网应用（或互联网信息系统），就是希望用户可以通过互联网来获得或管理信息。比如早期的静态网站，用户获得的就是一个HTML页面，以及其他相关的图片、视频等资源。对于我们现在看到的petclinic这个系统来说，我们希望用户获得或管理的信息是什么？是Owner、Pet、Vet等。这些信息跟一段视频、一张图片、一段文字本质上是一样的。所以实际上我们可以这么来看：互联网连接的是一个个资源，网络上的一个具体信息、任何事物，只要有被引用到的必要，它就是一个资源。例如：</p><ul><li>一段文本，一张图片，一首歌曲</li><li>数据库中的一行数据</li><li>一个手机号码，某用户的个人信息</li><li>一种服务</li></ul><p>这些都是资源。要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。例如：</p><ul><li><a href="http://www.ex.com/software/releases/latest.tar.gz" target="_blank" rel="noopener">http://www.ex.com/software/releases/latest.tar.gz</a></li><li><a href="http://www.ex.com/map/roads/USA/CA/17_mile_drive" target="_blank" rel="noopener">http://www.ex.com/map/roads/USA/CA/17_mile_drive</a></li><li><a href="http://www.ex.com/search/cs578" target="_blank" rel="noopener">http://www.ex.com/search/cs578</a></li><li><a href="http://www.ex.com/sales/2012/Q1" target="_blank" rel="noopener">http://www.ex.com/sales/2012/Q1</a></li><li><a href="http://www.ex.com/relationships/Alice;Bob" target="_blank" rel="noopener">http://www.ex.com/relationships/Alice;Bob</a></li></ul><p>为一个资源定义一个标识应该遵循一定的原则：</p><ul><li>应该易读，例如：<code>http://www.oschina.net/news/38119/oschina-translate-reward-plan</code></li><li>应该可以表达资源的层级关系，例如：<code>https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08/orders/2012/10</code>，可以用来表示2012年10月的订单记录</li><li>应该可以表示资源的同级关系，例如：<code>http:/.../git/block-sha1/sha1.h/compare/e3af72cdafab5993d18fae056f87e1d675913d08; bd63e61bdf38e872d5215c07b264dcc16e4febca</code></li><li>应该可以表达资源的过滤，例如：<code>https://github.com/git/git/pulls?state=closed</code>，表示git项目中已经关闭的推入请求</li></ul><p>此外，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p><ul><li>GET获：取表示，变更时获取表示（缓存）；</li><li>POST：使用服务端管理的（自动产生）的实例号创建资源，或创建子资源，部分更新资源，如果没有被修改，则不更新资源（乐观锁）；</li><li>PUT：用客户端管理的实例号创建一个资源，通过替换的方式更新资源，如果未被修改，则更新资源（乐观锁）；</li><li>DELETE：删除资源。</li></ul><p>服务方给的响应也是标准的，例如用GET操作时，服务器返回值</p><ul><li>200（OK） - 表示已在响应中发出</li><li>204（无内容） - 资源有空表示</li><li>301（Moved Permanently） - 资源的URI已被更新</li><li>303（See Other） - 其他（如，负载均衡）</li><li>304（not modified）- 资源未更改（缓存）</li><li>400 （bad request）- 指代坏请求（如，参数错误）</li><li>404 （not found）- 资源不存在</li><li>406 （not acceptable）- 服务端不支持所需表示</li><li>500 （internal server error）- 通用错误响应</li><li>503 （Service Unavailable）- 服务端当前无法处理请求</li></ul><p>其他POST、PUT、DELETE类似，此处不赘。</p><p>每个资源用规范的URL进行命名，对资源的操作是标准化的四个操作，所有的获取、创建、修改、删除任何一个资源的方式都是规范的，这就叫做<strong>统一接口原则</strong>。</p><p>因此回想一下，以前很多时候我们会设计出这样的URI来：</p><ul><li>GET /getUser/1</li><li>POST /createUser</li><li>PUT /updateUser/1</li><li>DELETE /deleteUser/1</li></ul><p>这些URL的设计就是不合理的。按统一资源接口要求使用标准的HTTP方法对资源进行操作，URI只应该来表示资源的名称，而不应该包括资源的操作。 通俗来说，URI不应该使用动作来描述。</p><h4 id="表现（Representation）／表述／表征"><a href="#表现（Representation）／表述／表征" class="headerlink" title="表现（Representation）／表述／表征"></a>表现（Representation）／表述／表征</h4><p>上面说了，“资源”是一种信息实体，它可以有多种外在表现形式。我们把“资源”具体呈现出来的形式，叫做它的“表现层”（Representation）。例如文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式，图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>我们之前说的URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的“.html”后缀名是不必要的，因为这个后缀名表示格式，属于“表现层”范畴，而URI应该只代表“资源”的位置。资源的表述包括数据和描述数据的元数据，例如，HTTP头“Content-Type” 就是这样一个元数据属性。客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。例如我们可以分别指定xml或json两种格式要求服务器返回同一个资源的不同表现形式：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/github-json.png"><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/github-xml.png"><p>服务器也可以拒绝返回某种不支持的表现形式：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/not-support.png"><h4 id="状态转移（State-Transfer）"><a href="#状态转移（State-Transfer）" class="headerlink" title="状态转移（State Transfer）"></a>状态转移（State Transfer）</h4><p>我们在最初使用互联网时首先干的就是浏览网页。当你浏览Web网页时，从一个连接跳到一个页面，再从另一个连接跳到另外一个页面，就是利用了超媒体的概念: 把一个个把资源链接起来。</p><p>对于更一般的资源而言，我们可以在表述格式里边加入链接来引导客户端，例如：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/link.png"><p>在<code>Link</code>头告诉客户端怎么访问下一页和最后一页的记录；在响应体里边，用url来链接项目所有者和项目地址。又例如，我们可以在创建订单后通过链接引导客户端如何去付款：</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/link-payment.png"><p>这些链接带来了状态转移。</p><p>首先明确一下状态这个概念。状态应该区分应用状态和资源状态，客户端负责维护应用状态，而服务端维护资源状态。客户端与服务端的交互必须是无状态的，并在每一次请求中包含处理该请求所需的一切信息。服务端不需要在请求间保留应用状态，只有在接受到实际请求的时候，服务端才会关注应用状态。这种无状态通信原则，使得服务端和中介能够理解独立的请求和响应。在多次请求中，同一客户端也不再需要依赖于同一服务器，方便实现高可扩展和高可用性的服务端。</p><p>客户端应用状态在服务端提供的超媒体的指引下发生变迁。服务端通过超媒体告诉客户端当前状态有哪些后续状态可以进入。</p><h4 id="完整的故事"><a href="#完整的故事" class="headerlink" title="完整的故事"></a>完整的故事</h4><p>看到这儿也许你有点晕，特别时状态转移这件事儿。我们来看一个完整的故事理解一下REST到底说了个什么。</p><p>例如我订阅了一个人的博客，想要获取他发表的所有文章（这里“他发表的所有文章”就是一个资源Resource）。于是我就向他的服务发出请求，说“我要获取你发表的所有文章，最好是atom格式的”，这时候服务器向你返回了atom格式的文章列表第一页（这里“atom格式的文章列表”就是表征Representation）。然后？</p><img src="http://pctozmwcv.bkt.clouddn.com//images/webtech/story.png"><ul><li>你看到了第一页的页尾，想要看第二页，这时候有趣的事情就来了。如果服务器记录了应用的状态（stateful），那么你只要向服务询问“我要看下一页”，那么服务器自然就会返回第二页。类似的，如果你当前在第二页，想服务器请求“我要看下一页”，那就会得到第三页。</li><li>但是REST的服务器恰恰是无状态的（stateless），服务器并没有保持你当前处于第几页，也就无法响应“下一页”这种具有状态性质的请求。因此客户端需要去维护当前应用的状态（application state），也就是“如何获取下一页资源”。</li><li>当然，“下一页资源”的业务逻辑必然是由服务端来提供。服务器在文章列表的atom表征中加入一个URI超链接（hyper link），指向下一页文章列表对应的资源。客户端就可以使用统一接口（Uniform Interface）的方式，从这个URI中获取到他想要的下一页文章列表资源。</li><li>上面的“能够进入下一页”就是应用的状态（State）。服务器把“能够进入下一页”这个状态以atom表征形式传输（Transfer）给客户端就是表征状态传输（REpresentational State Transfer）这个概念。</li></ul><p>也就是说：服务器生成包含状态转移的表征数据，用来响应客户端对于一个资源的请求；客户端借助这份表征数据，记录了当前的应用状态以及对应可转移状态的方式。</p><p>仔细琢磨琢磨，按这个思路去设计系统，是不是不需要写接口文档了？一个没看过你的文档的人甚至机器都能将你提供的资源完全获取得到。</p><h1 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h1><h2 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h2><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery 创立之初的主要目标是，简化HTML与JavaScript之间的操作，开发者可以轻松地使用 <code>$(&#39;elment&#39;).doSomething()</code> 的形式来对元素进行操作。</p><h3 id="早期"><a href="#早期" class="headerlink" title="早期"></a>早期</h3><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><p><a href="https://github.com/spring-petclinic/spring-petclinic-angularjs.git" target="_blank" rel="noopener">https://github.com/spring-petclinic/spring-petclinic-angularjs.git</a></p><p><a href="https://github.com/spring-petclinic/spring-petclinic-angular" target="_blank" rel="noopener">https://github.com/spring-petclinic/spring-petclinic-angular</a></p><h3 id="ReactJS"><a href="#ReactJS" class="headerlink" title="ReactJS"></a>ReactJS</h3><p><a href="https://github.com/spring-petclinic/spring-petclinic-reactjs" target="_blank" rel="noopener">https://github.com/spring-petclinic/spring-petclinic-reactjs</a></p><h3 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Modern-Web-Application&quot;&gt;&lt;a href=&quot;#Modern-Web-Application&quot; class=&quot;headerlink&quot; title=&quot;Modern Web Application&quot;&gt;&lt;/a&gt;Modern Web Applicati
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>About This Blog</title>
    <link href="http://blog.aosabook.cc/2018/07/26/hello-world/"/>
    <id>http://blog.aosabook.cc/2018/07/26/hello-world/</id>
    <published>2018-07-26T07:00:29.000Z</published>
    <updated>2018-07-26T07:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Architecting a Distributed File System with Microservices</title>
    <link href="http://blog.aosabook.cc/2018/06/19/Architecting-a-Distributed-File-System-with-Microservices/"/>
    <id>http://blog.aosabook.cc/2018/06/19/Architecting-a-Distributed-File-System-with-Microservices/</id>
    <published>2018-06-19T14:29:52.000Z</published>
    <updated>2018-07-26T07:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总体要求"><a href="#总体要求" class="headerlink" title="总体要求"></a>总体要求</h2><p>基于微服务架构，设计一个分布式文件系统。</p><h4 id="功能要求："><a href="#功能要求：" class="headerlink" title="功能要求："></a>功能要求：</h4><ol><li>基于Spring Boot实现NameNode和DataNode两个服务，在Spring Cloud微服务平台上运行一个NameNode实例和多个DataNode实例（无需考虑NameNode单点失效问题）</li><li>NameNode提供REST风格接口与用户交互，实现用户文件上传、下载、删除，DataNode不与用户直接交互（无需考虑NameNode的IO瓶颈问题）</li><li>NameNode将用户上传文件文件拆为固定大小的存储块，分散存储在各个DataNode上，每个块保存若干副本。块大小和副本数可通过系统参数配置。</li></ol><h3 id="非功能性要求："><a href="#非功能性要求：" class="headerlink" title="非功能性要求："></a>非功能性要求：</h3><ol><li>DataNode服务可弹性扩展，每次启动一个DataNode服务NameNode可发现并将其纳入整个系统</li><li>NameNode负责检查各DataNode健康状态，需模拟某个DataNode下线时NameNode自动在其他DataNode上复制（迁移）该下线服务原本保存的数据块</li><li>NameNode在管理数据块存储和迁移过程中应实现一定策略尽量保持各DataNode的负载均衡</li><li>提供一个namenode上的前端页面</li></ol><h3 id="接口示例："><a href="#接口示例：" class="headerlink" title="接口示例："></a>接口示例：</h3><ul><li><code>GET /</code> - 列出文件系统<code>/</code>目录内容</li><li><code>GET /user1/a.docx</code> - 下载<code>/user1/a.docx</code>文件</li><li><code>PUT /user2/b.zip</code> - 上传<code>b.zip</code>文件到<code>/user2</code>目录</li><li><code>DEL /user2/b.zip</code> - 删除<code>/user2</code>目录下<code>b.zip</code>文件</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><a href="https://github.com/njuics/dev-mdfs" target="_blank" rel="noopener">https://github.com/njuics/dev-mdfs</a></p><h3 id="工程简介"><a href="#工程简介" class="headerlink" title="工程简介"></a>工程简介</h3><p>示例代码为一个Maven构建管理的Java工程，工程包含若干模块，每个模块又是一个Maven管理的Java工程，各自实现一个微服务实体，包括微服务架构中的基础设施服务（如Config Service、Discovery Service和Tracing Service等）。顶层工程除POM文件外不包含其他源代码，该POM文件定义了各个模块共享的Maven属性、依赖和插件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>info.nemoworks.mdfs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mdfs-system<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mdfs-config-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.10.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sleuth.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://maven.apache.org/pom.html" target="_blank" rel="noopener">POM</a> stands for “Project Object Model”. It is an XML representation of a Maven project held in a file named pom.xml. </p></blockquote><h4 id="Config-Server"><a href="#Config-Server" class="headerlink" title="Config Server"></a>Config Server</h4><blockquote><p><a href="https://cloud.spring.io/spring-cloud-config/" target="_blank" rel="noopener">Spring Cloud Config</a> provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过<code>@EnableConfigServer</code>直接让Spring Boot启动一个Config Server。Spring Boot是个神器，会自动按你这个Annotation运行一个特定的<code>SpringBootApplication</code></p><blockquote><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a> makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p></blockquote><p>注意，Spring Boot目前最新版是<code>2.0.x</code>，但最新版与Spring Cloud 的最新版       <code>Edgware.SR3</code>似乎尚不兼容，所以我们还是用<code>1.5.14.RELEASE</code>这个版本的Spring Boot。请注意看顶层POM文件内容。</p><p>与Spring Petclinic的Microserice版本不同，为了避免麻烦，我将Config Server提供的config数据放在<code>resources</code>目录下，你可以看到一堆yml文件。其中的<code>application.yml</code>是当前Config Server的应用运行参数</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">     name:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">     active:</span> <span class="string">native</span></span><br></pre></td></tr></table></figure><p><code>profiles.active=native</code>代表用本地文件作为config来源，这个本地文件默认会搜索classpath（resources目录是在classpath中的），或者你通过<code>file:///...</code>去指定，具体参考<a href="https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html" target="_blank" rel="noopener">Spring Cloud文档</a>。</p><p>其他yml文件为每个其他服务对应的参数配置，启动Config Server后可以用curl命令看看内容是否正确。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8888/discovery-server/default</span><br></pre></td></tr></table></figure><h4 id="Discovery-Server"><a href="#Discovery-Server" class="headerlink" title="Discovery Server"></a>Discovery Server</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DiscoveryServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如同Config Server， 我们通过<code>@EnableEurekaServer</code>直接让Spring Boot启动一个 Discovery Server，或者叫Service Registry。这个Server实际上是Netflix这个不务正业的视频网站开发的一个微服务平台中的一个组件<code>Eureka</code>，Spring Cloud集成了这个组件。Eureka这个词源自希腊，用以表达发现某件事物、真相时的感叹词。关于这个服务，请参考Spring的文档。</p><blockquote><p><a href="https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka" target="_blank" rel="noopener">A service registry</a> is a phone book for your microservices. Each service registers itself with the service registry and tells the registry where it lives (host, port, node name) and perhaps other service-specific metadata - things that other services can use to make informed decisions about it. Clients can ask questions about the service topology (“are there any ‘fulfillment-services’ available, and if so, where?”) and service capabilities (“can you handle X, Y, and Z?”). You probably already use a technology that has some notion of a cluster (Cassandra, Memcached, etc.), and that information is ideally stored in a service registry. There are several popular options for service registries. Netflix built and then open-sourced their own service registry, Eureka. Another new, but increasingly popular option is Consul. We’ll look principally at some of the integration between Spring Cloud and Netflix’s Eureka service registry.</p></blockquote><p>注意，你如果使用版本号大于<code>8</code>的Java环境可能会导致错误。具体原因和解决方法以后再说。</p><h3 id="TBC"><a href="#TBC" class="headerlink" title="TBC"></a>TBC</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总体要求&quot;&gt;&lt;a href=&quot;#总体要求&quot; class=&quot;headerlink&quot; title=&quot;总体要求&quot;&gt;&lt;/a&gt;总体要求&lt;/h2&gt;&lt;p&gt;基于微服务架构，设计一个分布式文件系统。&lt;/p&gt;
&lt;h4 id=&quot;功能要求：&quot;&gt;&lt;a href=&quot;#功能要求：&quot; class
      
    
    </summary>
    
    
  </entry>
  
</feed>
